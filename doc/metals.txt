*metals.txt* nvim-metals
A nvim plugin for Metals utilizing Neovim's built-in LSP support.

https://scalameta.org/metals/

                            NVIM-METALS REFERENCE MANUAL

CONTENTS                                                           *nvim-metals*

    0.  Introduction ........ |metals-introduction|
    1.  Prerequisites........ |metals-prerequisites|
    2.  Getting Started...... |metals-getting-started|
    3.  Settings............. |metals-settings|
    4.  Options.............. |metals-options|
    5.  Commands............. |metals-commands|
    6.  Lua API.............. |metals-lua-api|
    7.  TVP Module........... |metals-tvp-module|
    8.  Custom Handlers...... |metals-custom-handlers|
    9.  Functions............ |metals-functions|
    10. Integrations......... |metals-integrations|

================================================================================
INTRODUCTION                                                *metals-introduction*

nvim-metals is a Lua plugin built to provide a better experience while using
Metals, the Scala Language Server, with Neovim's built-in LSP support. This
plugin provides the necessary commands you'll need to develop with nvim and
Metals. This plugin also implements many of the custom Metals LSP
extensions that will give you a much richer experience than just using Metals
with the default nvim-lspconfig setup, as well as automatically setting all of
the correct `init_options`.

================================================================================
PREREQUISITES                                             *metals-prerequisites*

- Ensure you're using the latest stable version of Neovim, v0.5.x.
- *DO NOT* use this plugin for Metals and also `neovim/nvim-lspconfig` for
  Metals. If you've used `neovim/nvim-lspconfig` before with Metals, make sure
  to remove metals setup for it as it will conflict with this plugin.  NOTE:
  that keeping the plugin installed for other LSP servers is totally fine,
  just let nvim-metals handle Metals.
- https://get-coursier.io/ - Metals uses coursier to manage the installation
  and updating of Metals.
- Make sure you have your mappings for various LSP functionality configured.
  Neovim provides functions for things like goto-definition, find references,
  etc, but they need to be mapped.

================================================================================
GETTING STARTED                                         *metals-getting-started*

Once installed, the most basic setup is to have the following: >

  augroup lsp
    au!
    au FileType scala,sbt lua require("metals").initialize_or_attach({})
  augroup end
<

Or simply as a |vim.cmd| if using a pure Lua setup. >
  cmd [[augroup lsp]]
  cmd [[au!]]
  cmd [[au FileType scala,sbt lua require("metals").initialize_or_attach(metals_config)]]
  cmd [[augroup end]]
<

This will give you the defaults that Metals provides. The empty `{}` that
is passed into |initialize_or_attach()| is necessary and is very similar to
the config object that is directly passed into the |vim.lsp.start_client()|
method. The only differences are the addition of root_patterns that can be used
to determine your root dir, and also a slightly different shaped settings. You
can see examples of how to use settings in the |metals-settings| section.
You can read more about the other config parameters in
|vim.lsp.start_client()|. This is the primary way to edit your
`init_options`, change or add any custom `handlers`, and set any configuration
settings.

NOTE: It's highly recommended to set your `statusBarProvider` to `on`. This
enables `metals/status` and also other helpful messages that are shown to you.
However, to enable this you _must_ have the metals status shown in your status
bar somehow. This can be achieved by using the provided |metals#status()| function, or
by just accessing it with Lua via `vim.g['metals_status']`. Everything will
still work without this, but the status messages and feedback that you will
get will be much less. You can enable the `statusBarProvider` like shown
below: >

  metals_config = require("metals").bare_config
  metals_config.init_options.statusBarProvider = "on"
<

Then instead of passing an empty `{}` to |initialize_or_attach()|, you'd pass
in `metals_config`.

Once setup, the first time you open a Scala project you'll be prompted to
install Metals. You can do this with the following command: |MetalsInstall|.

In order to install the latest snapshot of metals, you'll need to have set the
following: >

  let g:metals_server_version = '0.10.4+146-b5f79053-SNAPSHOT'
<

If no version is set, it defaults to the latest stable release. If a new
release comes out or you change your |g:metals_server_version|, you can
simply issue a |MetalsUpdate| command.

If you believe that you have everything configured correctly, but do not see
the message about installing Metals, ensure that you have removed `F` from
`shortmess`. After this you should be able to execute a |MetalsInfo| to see the
installed Metals version, the location of the install, and also the location
of the `nvim-metals.log` file.
================================================================================
SETTINGS                                                       *metals-settings*

The following settings are able to be passed along with the config table to
|initialize_or_attach()|. The keys are checked to ensure that you don't pass
in a setting that is not a valid Metals setting. You can set these like the
example below shows: >

  metals_config = require("metals").bare_config
  metals_config.settings = {
    showImplicitArguments = true,
    excludePackages = {
      "akka.actor.typed.javadsl",
      "com.github.swagger.akka.javadsl"
    }
  }
<
The following are all of the currently available settings. Note that this
isn't necessarily all of the settings that Metals has, but all of the
settings that can currently be used with nvim-metals. Ones that will have no
effect are simply skipped for now.

NOTE: keep in mind that for now, when settings are set, they are only sent
once to the server with a `workspace/didChangeConfiguration` right after
initialization. If you change your settings, you'll need to restart nvim for
them to take effect.

All available settings:
  * |ammoniteJvmProperties|
  * |bloopSbtAlreadyInstalled|
  * |bloopVersion|
  * |excludedPackages|
  * |fallbackScalaVersion|
  * |gradleScript|
  * |javaHome|
  * |mavenScript|
  * |millScript|
  * |remoteLanguageServer|
  * |sbtScript|
  * |scalafixConfigPath|
  * |scalafmtConfigPath|
  * |showImplicitArguments|
  * |showImplicitConversionsAndClasses|
  * |showInferredType|
  * |superMethodLensesEnabled|

ammoniteJvmProperties                                    *ammoniteJvmProperties*

Type: table as list ~
Default: {} ~

Optional list of JVM properties to pass along to the Ammonite server. Each
property needs to be a separate item. >
  {"-Xmx1G", "-Xms100M"}
<

bloopSbtAlreadyInstalled                              *bloopSbtAlreadyInstalled*

Type: boolean ~
Default: false ~

If true, Metals will not generate `metals.sbt` file under the assumption that
sbt-bloop is already manually installed in the sbt build. Build import will
fail with a 'not valid command bloopInstall' error in case Bloop is not
manually installed in the build when using this option.

bloopVersion                                                      *bloopVersion*

Type: string ~
Default: Whichever is included in your version of Metals ~

This version will be used for the Bloop build tool plugin, for any supported
build tool, while importing in Metals as well as for running the embedded
server. More than likely you'll never need to use this.

excludedPackages                                              *excludedPackages*

Type: table as list ~
Default: {} ~

Packages that will be excluded from completions, imports, and symbol searches.

Note: that this is in addition to some default packages that are already
excluded internally in Metals. The default excluded packages are listed below:
>
  META-INF
  images
  toolbarButtonGraphics
  jdk
  sun
  oracle
  java.awt.desktop
  org.jcp
  org.omg
  org.graalvm
  com.oracle
  com.sun
  com.apple
  apple
<

If there is a need to remove one of the defaults, you are able to do so by
including the package in your list and prepending `--` to it. >
  ["--sun"]
<

gradleScript                                                     *gradleScript*

Type: string ~
Default: '' ~

Optional absolute path to a gradle executable to use for running gradle
bloopInstall. By default, Metals uses gradlew with 5.3.1 gradle version.
Update this setting if your gradle script requires more customizations like
using environment variables.

fallbackScalaVersion                                      *fallbackScalaVersion*

Type: string ~
Default: '' ~

The Scala compiler version that is used as the default or fallback in case a
file doesn't belong to any build target or the specified Scala version isn't
supported by Metals. This applies to standalone Scala files, worksheets,
and Ammonite scripts.

Note: Setting this to a higher version than Metals currently supports won't
work and you'll just get a warning. So don't be cheeky and think you can bump
faster that Metals can be using this.

javaHome                                                              *javaHome*

Type: string ~
Default: falls back to JAVA_HOME ~

The Java Home directory used for indexing JDK sources and locating the java
binary.

mavenScript                                                        *mavenScript*

Type: string ~
Default: '' ~

Optional absolute path to a maven executable to use for generating bloop
config. By default, Metals uses mvnw maven wrapper with 3.6.1 maven version.
Update this setting if your maven script requires more customizations

millScript                                                          *millScript*

Type: string ~
Default: '' ~

Optional absolute path to a mill executable to use for running mill
mill.contrib.Bloop/install. By default, Metals uses mill wrapper script with
0.5.0 mill version. Update this setting if your mill script requires more
customizations like using environment variables.

remoteLanguageServer                                      *remoteLanguageServer*

Type: string ~
Default: '' ~

A URL pointing to an endpoint that implements a remote language server.

See https://scalameta.org/metals/docs/integrations/remote-language-server.html
for documentation on remote language servers.

sbtScript                                                            *sbtScript*

Type: string ~
Default: '' ~

Optional absolute path to an sbt executable to use for running sbt
bloopInstall. By default, Metals uses java -jar sbt-launch.jar with an
embedded launcher while respecting .jvmopts and .sbtopts. Update this setting
if your sbt script requires more customizations like using environment
variables.

scalafixConfigPath                                          *scalafixConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafix.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).

scalafmtConfigPath                                          *scalafmtConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafmt.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).


showImplicitArguments                                    *showImplicitArguments*

Type: boolean ~
Default: false ~

When this option is enabled, each method that has implicit arguments has them
displayed as extra info in the hover.

showImplicitConversionsAndClasses            *showImplicitConversionsAndClasses*

Type: boolean ~
Default: false ~

When this option is enabled, each place where an implicit method or class is
used has it displayed as extra info in the hover.

showInferredType                                              *showInferredType*

Type: boolean ~
Default: false ~

When this option is enabled, each method that can have inferred types has them
displayed as extra info in the hover.

superMethodLensesEnabled                              *superMethodLensesEnabled*

Type: boolean ~
Default: false ~

When enabled Metals will populate code lenses for you to navigate to the
parent/super methods of members. This is off by default since it is expensive
to populate.

================================================================================
OPTIONS                                                         *metals-options*

The following options are provided by nvim-metals.

                                                       *g:metals_server_version*
Type: string ~
Default: 'latest.stable' ~

Targeted server version that you'd like to install. Note that if this is
changed you need to do a |:MetalsInstall| or |:MetalsUpdate| again to ensure
that it is installed. If you need to check what version you're currently
using, you can use the |MetalsInfo| command.

                                                     *g:metals_decoration_color*
Type: string ~
Default: 'Conceal' ~

The highlight group that will be used to show decorations. For example, this
will change the way worksheet evaluations are displayed in `*.worksheet.sc`
file.

                                                        *g:metals_disabled_mode*
Type: boolean ~
Default: false ~

Used in the situation where you don't want Metals to start by default when you
enter a Scala workspace. WARNING: Use this with caution though as it may be
confusing why Metals isn't starting when you're in a workspace and you forgot
you have this set. If using this, once you'd like to use Metals in a specific
workspace you'll need to manually start the server via |MetalsStartServer| or
via a mapping with |start_server()|. Then it will continue to work in that
workspace until you close it. NOTE: The choice isn't persisted, so you need to
continually do this every time you want to use it even in the same workspace.
If people _actually_ use this setting and want that, submit a feature request,
if not it's not worth the extra work.

                                                *g:metals_use_global_executable*
Type: boolean ~
Default: false ~

For all you crazy Nix kids out there, or if you are want to re-use the same
executable for multiple clients, this is for you. Please NOTE that by doing
this, you are fully taking control of updating and installing Metals. Unless
there is a specific reason that you want to manage your own version and install
manually, then I'd recommend not using this setting and just letting nvim-metals
handle it.

================================================================================
COMMANDS                                                       *metals-commands*

The following commands are provided by nvim-metals:
  * |MetalsStartAmmonite|
  * |MetalsStopAmmonite|
  * |MetalsAnalyzeStacktrace|
  * |MetalsSwitchBsp|
  * |MetalsConnectBuild|
  * |MetalsDisconnectBuild|
  * |MetalsImportBuild|
  * |MetalsRestartBuild|
  * |MetalsCompileCancel|
  * |MetalsCompileClean|
  * |MetalsCompileCascade|
  * |MetalsCopyWorksheetOutput|
  * |MetalsRunDoctor|
  * |MetalsGenerateBspConfig|
  * |MetalsInstall|
  * |MetalsInfo|
  * |MetalsToggleLogs|
  * |MetalsNewScalaFile|
  * |MetalsNewScalaProject|
  * |MetalsOrganizeImports|
  * |MetalsQuickWorksheet|
  * |MetalsResetChoice|
  * |MetalsRestartServer|
  * |MetalsScanSources|
  * |MetalsStartServer|
  * |MetalsSuperMethodHierarchy|
  * |MetalsUpdate|

                                                           *MetalsStartAmmonite*
MetalsStartAmmonite          Start the Ammonite BSP Server.

                                                            *MetalsStopAmmonite*
MetalsStopAmmonite           Stop the Ammonite BSP Server.

                                                       *MetalsAnalyzeStacktrace*
MetalsAnalyzeStacktrace      Takes the stacktrace from your current register
                             and sends it to Metals to be analyzed. This will
                             then create a `.metals/stacktrace.scala` file
                             which will be populated with code lenses to help
                             you navigate to the trace location.

                                                               *MetalsSwitchBsp*
MetalsSwitchBsp              Prompts the user to select a new build server to
                             connect to. This command does nothing in case there
                             are less than two installed build servers on the
                             computer. In case the user has multiple BSP servers
                             installed then Metals will prompt the user to
                             select which server to use.

                                                            *MetalsConnectBuild*
MetalsConnectBuild           Manually connect to the build server.

                                                         *MetalsDisconnectBuild*
MetalsDisconnectBuild        Manually disconnect from the build server without
                             reconnecting.

                                                             *MetalsImportBuild*
MetalsImportBuild            Trigger an import for the current workspace.

                                                            *MetalsRestartBuild*
MetalsRestartBuild           Manually restart the build server.

                                                           *MetalsCompileCancel*
MetalsCompileCancel          Cancel any ongoing compilation.

                                                            *MetalsCompileClean*
MetalsCompileClean           Recompile all build targets in this workspace. By
                             default, Metals compiles the files incrementally.
                             In case of any compile artifacts corruption this
                             command might be run to make sure everything is
                             recompiled correctly.

                                                          *MetalsCompileCascade*
MetalsCompileCascade         Compile the current open file along with all build
                             targets that depend on it.

                                                     *MetalsCopyWorksheetOutput*
MetalsCopyWorksheetOutput    Copy the contents of a worksheet to your local
                             buffer.

                                                                  *MetalsRunDoctor*
MetalsRunDoctor                 Run Metals Doctor, which will open a floating
                             window to show you the status of Metals.

                                                       *MetalsGenerateBspConfig*
MetalsGenerateBspConfig      Checks to see if your build tool can serve as a BSP
                             server. If so, generate the necessary BSP config to
                             connect to the server. If there is more than one
                             build tool for a workspace, you can then choose the
                             desired one and that one will be used to generate
                             the config. After the config is generated, Metals
                             will attempt to auto-connect to it.

                                                                 *MetalsInstall*
MetalsInstall                Install Metals. NOTE that behind the scenes this
                             calls the exact same function as |MetalsUpdate|.

                                                                    *MetalsInfo*
MetalsInfo                   Give info about the currently installed version
                             of Metals that will be used, and display it in a
                             floating window. This will also contain the
                             location of Metals that was installed with
                             |MetalsInstall| and also the location of the
                             `nvim-metals.log` file and some helpful links.

                                                               *MetalsToggleLogs*
MetalsToggleLogs             Opens the embedded Nvim terminal tailing the
                             |.metals/metals.log| file in your workspace. If
                             triggered again, this will either bring you to
                             the window that has the logs open, or open the
                             buffer in a split in your current window.

                                                            *MetalsNewScalaFile*
MetalsNewScalaFile           Create a new Scala file. This will produce a
                             prompt for the user to choose what type of file
                             they'd like (case class, trait, object, etc) and
                             also prompts for a name.

                                                         *MetalsNewScalaProject*
MetalsNewScalaProject       Create a new Scala project using one of the
                            available g8 templates. This includes simple
                            projects as well as samples for most of the popular
                            Scala frameworks.

                                                         *MetalsOrganizeImports*
MetalsOrganizeImports       Sends a code action request to Metals to organize
                            imports. NOTE: that this is blocking, and it has a
                            timeout of 1000ms.

                                                          *MetalsQuickWorksheet*
MetalsQuickWorksheet         Creates a worksheet in the current directory that
                             you're in with the name of the worksheet being the
                             parent dir.

                             Example: If you're in
                             `src/main/scala/example/Main.scala` and you
                             execute this command the file you'll have created
                             will be
                             `src/main/scala/example/example.worksheet.sc`.

                                                             *MetalsResetChoice*
MetalsResetChoice            ResetChoicePopup command allows you to reset a
                             decision you made about different settings.
                             E.g. If you choose to import workspace with sbt you
                             can decide to reset and change it again.

                                                           *MetalsRestartServer*
MetalsRestartServer          Restart the Metals server.

                                                             *MetalsScanSources*
MetalsScanSources            Scan all workspaces sources.

                                                             *MetalsStartServer*
MetalsStartServer           Start Metals server. Must be in a Scala or sbt file
                            in a workspace where Metals is not yet started.

                                                    *MetalsSuperMethodHierarchy*
MetalsSuperMethodHierarchy  Gathers the inheritance hierarchy of a member and
                            if more than one is found, the user is given a quick
                            pick option to jump to the point in the hierarchy
                            tree selected.

                                                                  *MetalsUpdate*
MetalsUpdate                Update to the latest stable version of Metals or
                            change versions to the new version you added in
                            |metals_server_version|. NOTE
                            that behind the scenes this calls the same function
                            as |MetalsInstall|.

================================================================================
LUA API                                                         *metals-lua-api*

The following Lua module functions are exposed for you to use via mappings.
In order to use any of these you'd need to require the module. As an example,
if you wanted to bind the |buid_import()| to a mapping, the right hand side of
the mapping would be: >

    <cmd>lua require("metals").build_import()<CR>
<

Note: Most of these that are just executing a command have commands that you
can find above in |metals-commands| with more details.

                                                                *ammonite_end()*
ammonite_end()            Use to execute a |metals.ammonite-end| command.

                                                              *ammonite_start()*
ammonite_start()          Use to execute a |metals.ammonite-start| command.

                                                          *analyze_stacktrace()*
analyze_stacktrace()      Use to execute a |metals.analyze-stacktrace| command.

                                                                   *bare_config*
bare_config
                          An empty config table with empty tables also set for
                          settings, handlers, and init_options.

                                                                  *bsp_switch()*
bsp_switch()              Use to execute a |metals.bsp-switch| command.

                                                               *build_connect()*
build_connect()           Use to execute a |metals.build-connect| command.

                                                            *build_disconnect()*
build_disconnect()        Use to execute a |metals.build-disconnect| command.

                                                                *build_import()*
build_import()            Use to execute a |metals.build-import| command.

                                                               *build_restart()*
build_restart()           Use to execute a |metals.build-restart| command.

                                                              *compile_cancel()*
compile_cancel()          Use to execute a |metals.compile-cancel| command.

                                                             *compile_cascade()*
compile_cascade()         Use to execute a |metals.compile-cascade| command.

                                                               *compile_clean()*
compile_clean()           Use to execute a |metals.compile-clean| command.

                                                       *copy_worksheet_output()*
copy_worksheet_output()   Use to execute a |metals.copy-worksheet-output|
                          command.

                                                                  *doctor_run()*
doctor_run()              Use to execute a |metals.doctor-run| command.

                                                         *generate_bsp_config()*
generate_bsp_config()    Use to execute a |metals.generate-bsp-config| command.

                                                                        *info()*
info()                    Give info about the currently installed version of
                          Metals that will be used by nvim-metals, the
                          location of the installed Metals, and the location
                          of the `nvim-metals.log` file.

                                                        *initialize_or_attach()*
initialize_or_attach({config})    
                  
                          This is the main entrypoint into the plugin, and the
                          way to set up nvim-metals. This would be used in
                          the following way: >

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala,sbt lua require("metals").initialize_or_attach({})
    augroup end
  endif
<
                          Parameters:
                          {config} (table) This config is meant to mimic the
                          config that is used in the |vim.lsp.start_client()|.
                          You can visit the help docs of vim to see the full
                          signature of the config.

                          There are a couple small differences with this
                          config table.  The first is `root_patterns`, which
                          is a short way to change the `root_dir` of the
                          config. The default `root_patterns` are >
                             {'build.sbt', 'build.sc', 'build.gradle',
                             'pom.xml', '.git'}
<

                          The second small difference is the `settings` key.
                          Since this is only the config for `nvim-metals` you
                          don't need to preface your settings object with the
                          `metals` keyword. You can find more information
                          about how to set these in |metals-settings|.

                          NOTE: This function also includes some autocommands
                          that are given to the `on_attach()` of the config.
                          Those autocommands are below: >

  api.nvim_command [[augroup NvimMetals]]
  api.nvim_command [[autocmd!]]
  api.nvim_command [[autocmd BufEnter <buffer> lua require("metals").did_focus()]]
  api.nvim_command [[autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()]]
  api.nvim_command [[autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()]]
  api.nvim_command [[augroup end]]
<
                          Notice that this adds in an autocmd for
                          |vim.lsp.buf.document_highligh()| which is normally
                          not enabled by default. There is also no default
                          highlight group for this, so in order for you to
                          actually see the highlights, you should include the
                          following in your config, linked to the highlight of
                          your choosing. >

  vim.cmd [[hi! link LspReferenceText CursorColumn]]
  vim.cmd [[hi! link LspReferenceRead CursorColumn]]
  vim.cmd [[hi! link LspReferenceWrite CursorColumn]]
<

                                                           *install_or_update()*
install_or_update()       Install Metals if it doesn't exist or update to the
                          latest stable version or version set if
                          |g.metals_server_version| is set.

                                                                 *logs_toggle()*
logs_toggle()             Use to trigger a |tail -f .metals/log| on your current
                          workspace that will open in the embedded Neovim
                          terminal.

                                                              *new_scala_file()*
new_scala_file({directory_uri_opt}, {name_opt}, {file_type_option})

                         Use to execute a |metals.new-scala-file| command. All
                         of the params are optional. If they are not provided
                         you will be prompted for them.

                         Parameters:
                         {directory_uri_opt} (string) directory that you'd
                         like the new file to be created in.

                         {name_opt} (string) name you'd like to be given to the
                         file.

                         {file_type_option} (string) the type of Scala file
                         that you'd like to be created.

                                                           *new_scala_project()*
new_scala_project()      Use to execute a |metals.new-scala-project| command.


open_all_diagnostics()   Fills the quickfix list with the LSP diagnostics
                         for all buffers and opens it.
                         WARNING: Automatic updates in the quickfix for new
                         diagnostics are not yet implemented.
                         After opening the quickfix, in order to refresh
                         diagnostics the function must be called again.

                                                            *organize_imports()*
organize_imports()       Use a code action request to get edits from Metals to
                         organize imports for the current buffer.

                                                             *quick_worksheet()*
quick_worksheet()        Create a quick worksheet in your current dir with the
                         name of your current dir.

                                                                *reset_choice()*
reset_choice()           Use to execute a |metals.reset-choice| command.

                                                              *restart_server()*
restart_server()         Restart the Metals server.

                                                                *sources_scan()*
sources_scan()           Use to execute a |metals.sources-scan| command.

                                                                *start_server()*
start_server()           Start Metals server. Must be in a Scala or sbt file in
                         a workspace where Metals is not yet started.

                                                      *super_method_hierarchy()*
super_method_hierarchy() Use to execute a |metals.super-method-hierarchy|
                         command.

                                                             *worksheet_hover()*
worksheet_hover()        Use to expand the decoration to show the full hover
                         message that was returned from the decoration.

================================================================================
METALS TVP MODULE                                            *metals-tvp-module*

nvim-metals implements part of the Metals Tree View Protocol:
  https://scalameta.org/metals/docs/integrations/tree-view-protocol.html

The following configuration values are available to be passed into
|initialize_or_attach| under the `tvp` key. >

  -- Defaults
  Metals_config.tvp = {
    panel_width = 40,
    panel_alignment = "left",
    toggle_node_mapping = "<CR>",
    node_command_mapping = "r",
    collapsed_sign = "▸",
    expanded_sign = "▾",
  }
<

The two main functions that you'll want to make sure to have mapped are
|toggle_tree_view| and |reveal_in_tree|. The full api is below:

                                                              *reveal_in_tree()*
reveal_in_tree()             When in your source code this will locate the
                             node of the symbol that you are on, open the tree
                             view panel, and jump to it.

                                                            *toggle_tree_view()*
toggle_tree_view()           This will toggle your tree view panel open and
                             closed.

================================================================================
CUSTOM HANDLERS                                         *metals-custom-handlers*

The following are extra handlers that nvim-metals implements. More than likely
you'll never directly use these, but they are more of a reference of the extra
things that nvim-metals is providing you.

                                                             *['metals/status']*
['metals/status']({err}, {method}, {result})
                          Used to enable handling of |metals/status|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsStatusParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsstatus

                                                           *['metals/inputBox']*
['metals/inputBox']({err}, {method}, {result})
                          Used to enable handling of |metals/inputBox|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsInputBoxParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsinputbox

                                                          *['metals/quickPick']*
['metals/quickPick']({err}, {method}, {result})
                          Used to enable handling of |metals/quickPick|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsquickpick

                                               *['metals/executeClientCommand']*
['metals/executeClientCommand']({err}, {method}, {result})
                          Used to enable handling of
                          |metals/executeClientCommand|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsexecuteclientcommand

================================================================================
FUNCTIONS                                                     *metals-functions*

nvim-metals provides a few functions that can be used in your statusline in
order to show Errors, Warnings, and Metals status.

                                                               *metals#status()*
metals#status()           Able to be used in your statusline to show status
                          messages from Metals. In order for this to be set,
                          you need to ensure that |statusBarProvider| is set
                          to |on|, and the |metals/status| callback is set to
                          |metals_status|.

                                                               *metals#errors()*
metals#errors()          Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsErrorSign|
                         and |lsp.util.buf_diagnostics_count("Error")| to
                         return a string of sign + count of errors in the
                         current buffer.

                                                             *metals#warnings()*
metals#warnings()        Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsWarningSign|
                         and |lsp.util.buf_diagnostics_count("Warning")| to
                         return a string of sign + count of warnings in the
                         current buffer.

================================================================================
INTEGRATIONS                                               *metals-integrations*

Other plugins that nvim-metals integrates with for various extra features.

                                                               *metals-nvim-dap*
In order for you to utilize Metals to run, test, and debug code, a simple
integration with https://github.com/mfussenegger/nvim-dap is provided offering
great DAP support. Before getting starting it's best to read the |dap.txt| to
get an understanding of how to both setup and use nvim-dap as you'll need to
ensure you have mappings defined and the correct configurations. To get
started, you'll want ensure that nvim-dap is installed and then extend your
metals configuration with the following `on_attach` function. >

  Metals_config.on_attach = function(client, bufnr)
    require("metals").setup_dap()
  end
<

This will ensure that the correct |dap-adapter| is configured for Scala.
You'll also then want to ensure you have configurations setup for Scala. These
configurations are the configurations explained in |dap-configuration| with a
metals-specific table added under the `metals` key. The valid keys in the
metals table are as follows: >
  metals = {
    runType = "run",
    args = { "foo", "bar" },
    jvmOptions = { "-Dpropert=123" },
    env = { "RETRY" = "TRUE" },
    envFile = ".env"
  }
<

You can also read about the various keys and their meaning here in the Metals
docs https://scalameta.org/metals/docs/integrations/debug-adapter-protocol.html

The following run types are valid for Metals.
  - `run` (automatically discovers the main method and runs it for the current
    build target)
  - `testFile` (will discover all test classes in your current file and test
    them)
  - `testTarget` (will discover all test classes in your current build target
    and test them)

Below you can see an example of 3 configurations, one for each of the run
types. >

  local dap = require("dap")

  dap.configurations.scala = {
    {
      type = "scala",
      request = "launch",
      name = "Run",
      metals = {
        runType = "run",
      },
    },
    {
      type = "scala",
      request = "launch",
      name = "Test File",
      metals = {
        runType = "testFIle",
      },
    },
    {
      type = "scala",
      request = "launch",
      name = "Test Target",
      metals = {
        runType = "testTarget",
      },
    },
  }
<

                                                              *metals-telescope*

Metals provides a custom picker from
https://github.com/nvim-telescope/telescope.nvim which allows you to easily
choose any of the |metals-commands|. You can trigger the picker by using the
following function in a mapping: >

  lua require("telescope").extensions.metals.commands()
<

If this is the only way you'll trigger the picker, then there is no need to
explicitly load it in your telescope config. However, if you want the module
to be autocompleted when trying to trigger it via: >

  :Telescope metals commands

<

Then you'll want to explicitly enable it. NOTE that by doing this it will no
longer be lazy loaded. >

  require('telescope').extensions.metals.commands()

<

vim:tw=80:ts=2:ft=help:
