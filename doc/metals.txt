*metals.txt* nvim-metals
A nvim plugin for Metals utilizing Neovim's built-in LSP support.

https://scalameta.org/metals/

                            NVIM-METALS REFERENCE MANUAL

CONTENTS                                                           *nvim-metals*

    0. Introduction ........ |metals-introduction|
    1. Prerequisites........ |metals-prerequisites|
    2. Getting Started...... |metals-getting-started|
    3. Settings............. |metals-settings|
    4. Commands............. |metals-commands|
    5. LUA API.............. |metals-lua-api|
    6. TVP Module........... |metals-tvp-module|
    7. Custom Handlers...... |metals-custom-handlers|
    8. Integrations......... |metals-integrations|

================================================================================
INTRODUCTION                                                *metals-introduction*

nvim-metals is a Lua plugin built to provide a better experience while using
Metals, the Scala Language Server, with Neovim's built-in LSP support. This
plugin provides the necessary commands you'll need to develop with nvim and
Metals. This plugin also implements many of the custom Metals LSP
extensions that will give you a much richer experience than just using Metals
with the default nvim-lspconfig setup, as well as automatically setting all of
the correct `init_options`.

================================================================================
PREREQUISITES                                             *metals-prerequisites*

- Ensure you're using at least Neovim v0.7.0. While `nvim-metals` will aim to
  always work with the latest stable version of Neovim, there is no guarantee
  of compatibility with older versions.
- WARNING: do not use this plugin for Metals in parallel with `neovim/nvim-lspconfig`.
  If you've used `neovim/nvim-lspconfig` before with Metals, make sure
  to remove metals setup for it as it will conflict with this plugin.  NOTE:
  that keeping the plugin installed for other LSP servers is totally fine,
  just let `nvim-metals` handle Metals.
- https://get-coursier.io/ - Metals uses coursier to manage the installation
  and updating of Metals.
- Remove `F` from `shortmess`. `set shortmess-=F` (for lua
  `vim.opt_global.shortmess:remove("F")`) NOTE: Without doing this,
  autocommands that deal with filetypes prohibit messages from being shown, so
  some of the messages we show to help users get started may not be shown.
  If you're confident you don't need help setting up, then just remove this,
  and `nvim-metals` will work fine, but any log messages won't actually be
  shown to you if something goes wrong with `nvim-metals`.
- Make sure you have your mappings for various LSP functionality configured.
  Neovim provides functions for things like goto-definition, find references,
  etc, but they need to be mapped.
- This plugin relies on https://github.com/nvim-lua/plenary.nvim which you're
  more than likely already relying on for other plugins. However, make sure to
  also have this installed.
- Subscribe to https://github.com/scalameta/nvim-metals/discussions/253 which
  will list any breaking changes to `nvim-metals`.
- Check out the features list in
  https://github.com/scalameta/nvim-metals/discussions/279. New features will
  always be added there.
- If you're unfamiliar with configuring Neovim with Lua or not sure how to
  call Lua from Vimscript, check out the awesome guide at
  https://github.com/nanotee/nvim-lua-guide. The help docs here always assume
  Lua.

================================================================================
GETTING STARTED                                         *metals-getting-started*

Once installed, the most basic setup is to have the following: >

  local nvim_metals_group = vim.api.nvim_create_augroup("nvim-metals", { clear = true })
  vim.api.nvim_create_autocmd("FileType", {
    pattern = { "scala", "sbt", "java" },
    callback = function()
      require("metals").initialize_or_attach({})
    end,
    group = nvim_metals_group,
  })
<

This will give you the defaults that Metals provides. The empty `{}` that
is passed into |initialize_or_attach()| is necessary and is very similar to
the config object that is directly passed into the |vim.lsp.start_client()|
method. The only differences are the addition of root_patterns that can be used
to determine your root dir, and also a slightly different shaped settings. You
can see examples of how to use settings in the |metals-settings| section.
You can read more about the other config parameters in
|vim.lsp.start_client()|. This is the primary way to edit your
`init_options`, change or add any custom `handlers`, and set any configuration
settings.

WARNING: Metals offers basic Java support, but not nearly to the level of the
Java language server, so while we do have `java` in the FileType autocmd, you
may not want this if you're using something like `nvim-jdtls` for more Java
heavy projects. Since then you'd be triggering two different servers to
connect here, which you probably don't want. However, if you're primarily
using Scala and also have _some_ Java to deal with, then ensuring that `java`
is listed here is important or else Metals won't attach on Java files.

NOTE: It's highly recommended to set your `statusBarProvider` to either `"on"`
or `"off"`. By default it's set to `"show-message"` to ensure that anyone
starting out will see the messages, but this will not give you the best user
experience.

If you set it to `"off"`, you're telling Metals to use the default LSP
progress mechanism. If you do this, you'll need to ensure you have a plugin
installed that handles progress like https://github.com/j-hui/fidget.nvim, for
example. This is the recommended way.

If you set this to `"on"` it enables `metals/status`, which as a
Metals-specific LSP extension for status messages that nvim-metals makes
limited support of. However, to enable this you _must_ have the metals status
shown in your status bar somehow. This can be achieved by just accessing it
with Lua via `vim.g['metals_status']`.

You can chage the value of `statusBarProvider` like shown below: >

  metals_config = require("metals").bare_config()
  metals_config.init_options.statusBarProvider = "on"
<

You can also get extra status information from Metals about your BSP
connection. You can access this with `vim.g['metals_bsp_status']`. This will
either return useful messages from your build server about things like
disconnects or just the name of the build server being used.

Then instead of passing an empty `{}` to |initialize_or_attach()|, you'd pass
in `metals_config`.

Once set up, the first time you open a Scala project you'll be prompted to
install Metals. You can do this with the following command: |MetalsInstall|.

In order to install the latest snapshot of metals you can explicitly set the
snapshot version in your settings table: >

  metals_config = require("metals").bare_config()
  metals_config.settings = {
    serverVersion = "0.10.9+131-30f6a57b-SNAPSHOT"
  }
<

You can also just default to the latest snapshot by setting this to
`latest.snapshot`. NOTE: that while this will pull in the latest snapshot it
happens during the actual install, not automatically all the time. So you
still need to trigger a |:MetalsUpdate| regularly to get the newest snapshots.

If no version is set, it defaults to the latest stable release. If a new
release comes out or you change your server version, you can issue a
|MetalsUpdate| command to re-install it.
================================================================================
SETTINGS                                                       *metals-settings*

The following settings are able to be passed along with the config table to
|initialize_or_attach()|. The keys are checked to ensure that you don't pass
in a setting that is not a valid Metals setting. You can set these like the
example below shows: >

  metals_config = require("metals").bare_config()
  metals_config.settings = {
    verboseCompilation = true,
    excludedPackages = {
      "akka.actor.typed.javadsl",
      "com.github.swagger.akka.javadsl"
    }
  }
<

NOTE: there are two lists of settings below. They are all grouped under
settings and set the same way just to make it easier for the user to not have
to differentiate them, however they are handled differently internally. Some
are actually sent to the server to use and others are kept in `nvim-metals` to
set plugin related things.

All available settings:

_ones that are sent and used by the server_
  * |ammoniteJvmProperties|
  * |autoImportBuild|
  * |bloopSbtAlreadyInstalled|
  * |bloopVersion|
  * |bloopJvmProperties|
  * |defaultBspToBuildTool|
  * |enableSemanticHighlighting|
  * |excludedPackages|
  * |fallbackScalaVersion|
  * |gradleScript|
  * |inlayHints|
  * |javaFormat.eclipseConfigPath|
  * |javaFormat.eclipseProfile|
  * |javaHome|
  * |mavenScript|
  * |millScript|
  * |remoteLanguageServer|
  * |sbtScript|
  * |scalaCliLauncher|
  * |scalafixConfigPath|
  * |scalafixRulesDependencies|
  * |scalafmtConfigPath|
  * |serverProperties|
  * |superMethodLensesEnabled|
  * |verboseCompilation|

_ones that are used internally by `nvim-metals`_
  * |disabledMode|
  * |metalsBinaryPath|
  * |serverOrg|
  * |serverVersion|
  * |useGlobalExecutable|


ammoniteJvmProperties                                    *ammoniteJvmProperties*

Type: table as list ~
Default: {} ~

Optional list of JVM properties to pass along to the Ammonite server. Each
property needs to be a separate item. >
  {"-Xmx1G", "-Xms100M"}
<

autoImportBuild                                                *autoImportBuild*

Type: string ~
Default: "off" ~

Automatically import your build instead of recieving a prompt to ask you.

"initial" means that your build will only be automatically be imported upon
first opening a project.

"all" means that your build will just always be automatically imported or
reloaded upon detected changes.

bloopSbtAlreadyInstalled                              *bloopSbtAlreadyInstalled*

Type: boolean ~
Default: false ~

If true, Metals will not generate `metals.sbt` file under the assumption that
sbt-bloop is already manually installed in the sbt build. Build import will
fail with a 'not valid command bloopInstall' error in case Bloop is not
manually installed in the build when using this option.

bloopVersion                                                      *bloopVersion*

Type: string ~
Default: Whichever is included in your version of Metals ~

This version will be used for the Bloop build tool plugin, for any supported
build tool, while importing in Metals as well as for running the embedded
server. More than likely you'll never need to use this.

bloopJvmProperties                                          *bloopVjmProperties*

Type: table as list ~
Default: {} ~

Optional list of JVM properties to pass along to the Bloop server. Please
follow this guide for the format
https://scalacenter.github.io/bloop/docs/server-reference#global-settings-for-the-server.

defaultBspToBuildTool                                    *defaultBspToBuildTool*

Type: boolean ~
Default: false ~

When your build tool can also serve as your build server, default to using it
for BSP. The default is Bloop for build tools that Bloop supports.

                                                                  *disabledMode*
Type: boolean ~
Default: false ~

Used in the situation where you don't want Metals to start by default when you
enter a Scala workspace. WARNING: Use this with caution though as it may be
confusing why Metals isn't starting when you're in a workspace and you forgot
you have this set. If using this, once you'd like to use Metals in a specific
workspace you'll need to manually start the server via |MetalsStartServer| or
via a mapping with |start_server()|. Then it will continue to work in that
workspace until you close it. NOTE: The choice isn't persisted, so you need to
continually do this every time you want to use it even in the same workspace.
If people _actually_ use this setting and want that, submit a feature request,
if not it's not worth the extra work.

enableSemanticHighlighting                          *enableSemanticHighlighting* 

Type: boolean ~
Default: true ~

When this option is enabled, Metals will provide semantic tokens for clients
that support it. The feature is still experimental and does not work for
all sources.

excludedPackages                                              *excludedPackages*

Type: table as list ~
Default: {} ~

Packages that will be excluded from completions, imports, and symbol searches.

Note: that this is in addition to some default packages that are already
excluded internally in Metals. The default excluded packages are listed below:
>
  META-INF
  images
  toolbarButtonGraphics
  jdk
  sun
  oracle
  java.awt.desktop
  org.jcp
  org.omg
  org.graalvm
  com.oracle
  com.sun
  com.apple
  apple
<

If there is a need to remove one of the defaults, you are able to do so by
including the package in your list and prepending `--` to it. >
  ["--sun"]
<

gradleScript                                                      *gradleScript*

Type: string ~
Default: '' ~

Optional absolute path to a gradle executable to use for running gradle
bloopInstall. By default, Metals uses gradlew with 5.3.1 gradle version.
Update this setting if your gradle script requires more customizations like
using environment variables.

fallbackScalaVersion                                      *fallbackScalaVersion*

Type: string ~
Default: '' ~

The Scala compiler version that is used as the default or fallback in case a
file doesn't belong to any build target or the specified Scala version isn't
supported by Metals. This applies to standalone Scala files, worksheets,
and Ammonite scripts.

Note: Setting this to a higher version than Metals currently supports won't
work and you'll just get a warning. So don't be cheeky and think you can bump
faster than Metals can by using this.

inlayHints                                                          *inlayHints*

Type: table ~
Default: {} ~

Table of inlay hints to enable. >
  {
    hintsInPatternMatch = { enable = true },
    implicitArguments = { enable = true },
    implicitConversions = { enable = true },
    inferredTypes = { enable = true },
    typeParameters = { enable = true },
  }
<

javaFormat.eclipseConfigPath                      *javaFormat.eclipseConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the eclipse-formatter.xml file. Should be an absolute
path and use forward slashes `/` for file separators (even on Windows).

javaFormat.eclipseProfile                            *javaFormat.eclipseProfile*

Type: string ~
Default: '' ~

Optional Eclipse format profile to use.

javaHome                                                              *javaHome*

Type: string ~
Default: falls back to JAVA_HOME ~

The Java Home directory used for indexing JDK sources and locating the java
binary. This will also be forwarded to Bloop to ensure it starts using this
Java. NOTE: Due to the way nvim-metals bootstraps Metals, this setting won't
actually be used to start Metals, but rather your JAVA_HOME will be picked up
and used. You can see more details about this in
https://github.com/scalameta/nvim-metals/issues/380.

mavenScript                                                        *mavenScript*

Type: string ~
Default: '' ~

Optional absolute path to a maven executable to use for generating bloop
config. By default, Metals uses mvnw maven wrapper with 3.6.1 maven version.
Update this setting if your maven script requires more customizations

millScript                                                          *millScript*

Type: string ~
Default: '' ~

Optional absolute path to a mill executable to use for running mill
mill.contrib.Bloop/install. By default, Metals uses mill wrapper script with
0.5.0 mill version. Update this setting if your mill script requires more
customizations like using environment variables.

metalsBinaryPath                                              *metalsBinaryPath*

Type: string ~
Default: '' ~

Another setting for you crazy Nix kids. If you'd like to pass in a specific
Metals instance that isn't a global executable, you can do so by setting this
to the absolute path of Metals.

remoteLanguageServer                                      *remoteLanguageServer*

Type: string ~
Default: '' ~

A URL pointing to an endpoint that implements a remote language server.

See https://scalameta.org/metals/docs/integrations/remote-language-server.html
for documentation on remote language servers.

sbtScript                                                            *sbtScript*

Type: string ~
Default: '' ~

Optional absolute path to an sbt executable to use for running sbt
bloopInstall. By default, Metals uses java -jar sbt-launch.jar with an
embedded launcher while respecting .jvmopts and .sbtopts. Update this setting
if your sbt script requires more customizations like using environment
variables.

scalaCliLauncher                                              *scalaCliLauncher*

Type: string ~
Default: '' ~

Optional absolute path to the Scala CLI launcher to use.

scalafixConfigPath                                          *scalafixConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafix.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).

scalafixRulesDependencies                            *scalafixRulesDependencies*

Type: table ~
Default: {} ~

Table of Scalafix external Scalafix dependencies for Metals to run. Example
format: `com.github.liancheng::organize-imports:0.6.0`.

scalafmtConfigPath                                          *scalafmtConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafmt.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).

                                                                     *serverOrg*
Type: string ~
Default: 'org.scalameta' ~

Useful if you'd like to use a Metals that might be published under another
org.

                                                                 *serverVersion*
Type: string ~
Default: 'latest.stable' ~

Targeted server version that you'd like to install. Note that if this is
changed you need to do a |:MetalsInstall| or |:MetalsUpdate| again to ensure
that it is installed. If you need to check what version you're currently
using, you can use the |MetalsInfo| command. NOTE: that `latest.snapshot` is
also available as a value to install whatever the latest snapshot is.

serverProperties                                              *serverProperties*

Type: table ~
Default: {} ~

Table of properties to pass along to the Metals server. By default, the
environment variable `JAVA_OPTS` and the `.jvmopts` file are respected.
However, we care most about the proxy settings from those places, not
necessarily the memory options since Metals has different requirements for
example than sbt. So if you have proxy settings defined in `JAVA_OPTS`, then
no need to define them here again. However, if you want to set some specific
memory settings for Metals, then this is the place.

superMethodLensesEnabled                              *superMethodLensesEnabled*

Type: boolean ~
Default: true ~

When enabled Metals will populate code lenses for you to navigate to the
parent/super methods of members.

                                                           *useGlobalExecutable*
Type: boolean ~
Default: false ~

For all you crazy Nix kids out there, or if you want to re-use the same
executable for multiple clients, this is for you. Please NOTE that by doing
this, you are fully taking control of updating and installing Metals. Unless
there is a specific reason that you want to manage your own version and
install manually, then I'd recommend not using this setting and just letting
`nvim-metals` handle it.

                                                            *verboseCompilation*
Type: boolean ~
Default: false ~

If a build server supports it (for example Bloop or Scala CLI), setting it to
true will make the logs contain all the possible debugging information
including that about incremental compilation in Zinc.

================================================================================
COMMANDS                                                       *metals-commands*

The following commands are provided by `nvim-metals`:
  * |MetalsAnalyzeStacktrace|
  * |MetalsCompileCancel|
  * |MetalsCompileCascade|
  * |MetalsCompileClean|
  * |MetalsConnectBuild|
  * |MetalsCopyWorksheetOutput|
  * |MetalsDisconnectBuild|
  * |MetalsFindInDependencyJars|
  * |MetalsGenerateBspConfig|
  * |MetalsGotoSuperMethod|
  * |MetalsImportBuild|
  * |MetalsInstall|
  * |MetalsInfo|
  * |MetalsNewScalaFile|
  * |MetalsNewScalaProject|
  * |MetalsOpenNewGithubIssue|
  * |MetalsOrganizeImports|
  * |MetalsQuickWorksheet|
  * |MetalsResetChoice|
  * |MetalsResetWorkspace|
  * |MetalsRestartBuild|
  * |MetalsRestartServer|
  * |MetalsRunDoctor|
  * |MetalsRunScalafix|
  * |MetalsRunSingleScalafix|
  * |MetalsScanSources|
  * |MetalsSelectTestCase|
  * |MetalsSelectTestSuite|
  * |MetalsShowBuildTargetInfo|
  * |MetalsShowCfr|
  * |MetalsShowJavap|
  * |MetalsShowJavapVerbose|
  * |MetalsShowSemanticdbCompact|
  * |MetalsShowSemanticdbDetailed|
  * |MetalsShowSemanticdbProto|
  * |MetalsShowTasty|
  * |MetalsStartAmmonite|
  * |MetalsStartScalaCli|
  * |MetalsStartServer|
  * |MetalsStopAmmonite|
  * |MetalsStopScalaCli|
  * |MetalsSuperMethodHierarchy|
  * |MetalsSwitchBsp|
  * |MetalsToggleLogs|
  * |MetalsUpdate|
  * |MetalsZipReports|

                                                       *MetalsAnalyzeStacktrace*
MetalsAnalyzeStacktrace      Takes the stacktrace from your current register
                             and sends it to Metals to be analyzed. This will
                             then create a `.metals/stacktrace.scala` file
                             which will be populated with code lenses to help
                             you navigate to the trace location.

                                                           *MetalsCompileCancel*
MetalsCompileCancel          Cancel any ongoing compilation.

                                                          *MetalsCompileCascade*
MetalsCompileCascade         Compile the current open file along with all build
                             targets that depend on it.

                                                            *MetalsCompileClean*
MetalsCompileClean           Recompile all build targets in this workspace. By
                             default, Metals compiles the files incrementally.
                             In case of any compile artifacts corruption this
                             command might be run to make sure everything is
                             recompiled correctly.

                                                            *MetalsConnectBuild*
MetalsConnectBuild           Manually connect to the build server.

                                                     *MetalsCopyWorksheetOutput*
MetalsCopyWorksheetOutput    Copy the contents of a worksheet to your local
                             buffer.

                                                         *MetalsDisconnectBuild*
MetalsDisconnectBuild        Manually disconnect from the build server without
                             reconnecting.

                                                    *MetalsFindInDependencyJars*
MetalsFindInDependencyJars   Used to find values in dependency jar files. Note
                             that this differs from global symbol search in
                             that it looks through a specific filetype given a
                             mask. The default mask is `.conf`. This is useful
                             to search through configuration files that your
                             dependencies may be bringing in.

                                                       *MetalsGenerateBspConfig*
MetalsGenerateBspConfig      Checks to see if your build tool can serve as a
                             BSP server. If so, generate the necessary BSP
                             config to connect to the server. If there is more
                             than one build tool for a workspace, you can then
                             choose the desired one and that one will be used
                             to generate the config. After the config is
                             generated, Metals will attempt to auto-connect to
                             it.

                                                         *MetalsGotoSuperMethod*
MetalsGotoSuperMethod        Jump to the super method of the current symbol.

                                                             *MetalsImportBuild*
MetalsImportBuild            Trigger an import for the current workspace.

                                                                    *MetalsInfo*
MetalsInfo                   Give info about the currently installed version
                             of Metals that will be used, and display it in a
                             floating window. This will also contain the
                             location of Metals that was installed with
                             |MetalsInstall|, the location of the
                             `nvim-metals.log` file, and some helpful links.

                                                                 *MetalsInstall*
MetalsInstall                Install Metals. NOTE that behind the scenes this
                             calls the exact same function as |MetalsUpdate|.

                                                            *MetalsNewScalaFile*
MetalsNewScalaFile           Create a new Scala file. This will produce a
                             prompt for the user to choose what type of file
                             they'd like (case class, trait, object, etc) and
                             also prompts for a name.

                                                         *MetalsNewScalaProject*
MetalsNewScalaProject        Create a new Scala project using one of the
                             available g8 templates. This includes simple
                             projects as well as samples for most of the popular
                             Scala frameworks.

                                                      *MetalsOpenNewGithubIssue*
MetalsOpenNewGithubIssue     Grab some relevant information from your system
                             and open a new issue in the Metals GitHub repo
                             with this information.

                             NOTE: That this is for Metals-specific bugs. If
                             you'd like to create an issue for this plusin,
                             make sure to create it in
                             `scalameta/nvim-metals`.

                                                         *MetalsOrganizeImports*
MetalsOrganizeImports        Sends a code action request to Metals to organize
                             imports. NOTE: that this is blocking, and it has a
                             timeout of 1000ms.

                                                          *MetalsQuickWorksheet*
MetalsQuickWorksheet         Creates a worksheet in the current directory that
                             you're in with the name of the worksheet being the
                             parent dir.

                             Example: If you're in
                             `src/main/scala/example/Main.scala` and you
                             execute this command the file you'll have created
                             will be
                             `src/main/scala/example/example.worksheet.sc`.

                                                             *MetalsResetChoice*
MetalsResetChoice            ResetChoicePopup command allows you to reset a
                             decision you made about different settings.
                             E.g. If you choose to import workspace with sbt
                             you can decide to reset and change it again.

                                                          *MetalsResetWorkspace*
MetalsResetWorkspace         Fully clean the workspace and restart the build
                             server. When things seem to get borked and you
                             don't know what to do, use this. It's
                             essentially the same as if you'd do an `rm -rf`
                             on all the dirs like `.bloop` etc that Metals
                             creates, as well as restarting whatever build
                             server you're using.

                                                            *MetalsRestartBuild*
MetalsRestartBuild           Manually restart the build server.

                                                           *MetalsRestartServer*
MetalsRestartServer          Restart the Metals server.

                                                               *MetalsRunDoctor*
MetalsRunDoctor              Run Metals Doctor, which will open a floating
                             window to show you the status of Metals.

                                                             *MetalsRunScalafix*
MetalsRunScalafix            Runs all of the Scalafix rules that you have
                             configured for you current project.

                             NOTE: that if you're using external Scalafix
                             rules you'll need to ensure you add them to your
                             settings table under `scalafixRulesDependencies`.

                                                       *MetalsRunSingleScalafix*
MetalsRunSingleScalafix      Runs a single Scalafix rules that you have given
                             or provides you with a list of configured rules to
                             choose from.

                             NOTE: that if you're using external Scalafix
                             rules you'll need to ensure you add them to your
                             settings table under `scalafixRulesDependencies`.

                                                             *MetalsScanSources*
MetalsScanSources            Scan all workspaces sources.

                                                          *MetalsSelectTestCase*
MetalsSelectTestCase         Select the test suite in your workspace to run.
                             NOTE: this requires additional configuration.
                             See |metals-nvim-dap|

                                                         *MetalsSelectTestSuite*
MetalsSelectTestSuite        Select test case from current file to run.
                             NOTE: this requires additional configuration.
                             See |metals-nvim-dap|

                                                     *MetalsShowBuildTargetInfo*
MetalsShowBuildTargetInfo    Will return a list of all the build targets in
                             your build that you can choose from. Once chosen it
                             will display all sorts of information about your
                             build target such as the scalacOptions, the
                             classpath, etc.

                                                                 *MetalsShowCfr*
MetalsShowCfr                Show the cfr output for the current file.
                               - https://www.benf.org/other/cfr/

                                                               *MetalsShowJavap*
MetalsShowJavap              Show the compact output of javap for the given
                             file you're in.

                                                        *MetalsShowJavapVerbose*
MetalsShowJavapVerbose       Show the verbose output of javap for the given file
                             you're in.

                                                   *MetalsShowSemanticdbCompact*
MetalsShowSemanticdbCompact  Show the compact SemanticDB of the given file you
                             are in.

                                                  *MetalsShowSemanticdbDetailed*
MetalsShowSemanticdbDetailed Show the detailed SemanticDB of the given file you
                             are in.

                                                     *MetalsShowSemanticdbProto*
MetalsShowSemanticdbProto    Show the proto SemanticDB of the given file you
                             are in.

                                                               *MetalsShowTasty*
MetalsShowTasty              Show the TASTy representation of the current file.
                             NOTE: This currently only works in Scala 3.

                                                           *MetalsStartAmmonite*
MetalsStartAmmonite          Start the Ammonite BSP Server.

                                                           *MetalsStartScalaCli*
MetalsStartScalaCli          Start Scala CLI as a BSP server.

                                                             *MetalsStartServer*
MetalsStartServer            Start Metals server. Must be in a Scala or sbt file
                             in a workspace where Metals is not yet started.

                                                            *MetalsStopAmmonite*
MetalsStopAmmonite           Stop the Ammonite BSP Server.

                                                            *MetalsStopScalaCli*
MetalsStopScalaCli           Stop the Scala CLI when running as a Build
                             Server.

                                                    *MetalsSuperMethodHierarchy*
MetalsSuperMethodHierarchy   Gathers the inheritance hierarchy of a member and
                             if more than one is found, the user is given a
                             quick pick option to jump to the point in the
                             hierarchy tree selected.

                                                               *MetalsSwitchBsp*
MetalsSwitchBsp              Prompts the user to select a new build server to
                             connect to. This command does nothing in case there
                             are less than two installed build servers on the
                             computer. In case the user has multiple BSP servers
                             installed then Metals will prompt the user to
                             select which server to use.

                                                              *MetalsToggleLogs*
MetalsToggleLogs             Opens the embedded Nvim terminal tailing the
                             |.metals/metals.log| file in your workspace. If
                             triggered again, this will either bring you to
                             the window that has the logs open, or open the
                             buffer in a split in your current window.

                                                                  *MetalsUpdate*
MetalsUpdate                 Update to the latest stable version of Metals or
                             change versions to the new version you have
                             defined in your settings table under
                             `serverVersion`.

                             NOTE that behind the scenes this calls the same
                             function as |MetalsInstall|.

                                                              *MetalsZipReports*
MetalsZipReports             Zip up the icognito repos that are located under
                             `.metals/.reports/metals` than can be used to
                             upload with an issue report.

================================================================================
LUA API                                                         *metals-lua-api*

The following Lua module functions are exposed for you to use via mappings.
In order to use any of these you'd need to require the module. As an example,
if you wanted to bind the |import_build()| to a mapping, the right hand side of
the mapping would be: >

    <cmd>lua require("metals").import_build()<CR>
<

Note: Most of these that are just executing commands that you can
find above in |metals-commands| with more details. Please keep in mind
that here we are trying to unify command names with verb followed by noun.
That's why `nvim-metals` lua commands sometimes differ from metals commands.

                                                           *analyze_stacktrace()*
analyze_stacktrace()       Use to execute a |metals.analyze-stacktrace| command.

                                                                  *bare_config()*
bare_config()
                           Returns an empty config table with empty tables also
                           set for settings, handlers, and init_options, and
                           tvp settings. Use this when setting up settings for
                           `nvim-metals` to pass into |initialize_or_attach()|.

commands()                                                           *commands()*
                           Gives the users all the available |metals-commands|
                           utilizing |vim.ui.select()|. If you're a telescope
                           user you can choose to use this with something like
                           https://github.com/stevearc/dressing.nvim or feel
                           free to use the built-in telescope extension
                           |metals-telescope| which just displays things a bit
                           better since we have more control over using
                           |vim.ui.select()|. If you're not a telescope user,
                           then you'll want to use this.

                                                               *compile_cancel()*
compile_cancel()           Use to execute a |metals.compile-cancel| command.

                                                              *compile_cascade()*
compile_cascade()          Use to execute a |metals.compile-cascade| command.

                                                                *compile_clean()*
compile_clean()            Use to execute a |metals.compile-clean| command.

                                                                *connect_build()*
connect_build()            Use to execute a |metals.build-connect| command.

                                                        *copy_worksheet_output()*
copy_worksheet_output()    Use to execute a |metals.copy-worksheet-output|
                           command.

                                                             *disconnect_build()*
disconnect_build()         Use to execute a |metals.build-disconnect| command.

                                                          *generate_bsp_config()*
generate_bsp_config()      Use to execute a |metals.generate-bsp-config| command.

                                                            *goto_super_method()*
goto_super_method()        Use to execute a |metals.goto-super-method| command.
                           This is the same as triggering the code lens on a
                           symbol that is overriding another.

                                                      *find_in_dependency_jars()*
find_in_dependency_jars()  Use to send in a `meatals/findTextInDependencyJars`
                           request to the server.

                                                              *hover_worksheet()*
hover_worksheet({opts})    Use to expand the evaluation inlay_hint to show the
                           full tooltip message that was returned from the
                           evaluation.

                           Parameter is optional.

                           Parameters:
                           {opts} (table) Options that are passed to
                           |vim.lsp.util.open_floating_preview()|

                                                                 *import_build()*
import_build()             Use to execute a |metals.build-import| command.

                                                                         *info()*
info()                     Give info about the currently installed version of
                           Metals that will be used by `nvim-metals`, the
                           location of the installed Metals, and the location
                           of the `nvim-metals.log` file.

                                                         *initialize_or_attach()*
initialize_or_attach({config})

                           This is the main entrypoint into the plugin, and the
                           way to set up `nvim-metals`. See the example in
                           |metals-getting-started| for an example.

                           Parameters:
                           {config} (table) This config is meant to mimic the
                           config that is used in the |vim.lsp.start_client()|.
                           You can visit the help docs of vim to see the full
                           signature of the config.

                           There are a couple small differences with this
                           config table. The first is `root_patterns`, which
                           is a short way to change way the `root_dir` is
                           detected by giving it new patterns. The default
                           `root_patterns` are >
                              {'build.sbt', 'build.sc', 'build.gradle',
                              'pom.xml', '.git'}
<

                           By default, when Metals detects a valid root_dir,
                           it will check 1 folder up to see if there is a
                           valid "parent" project above it. If you have a
                           more complex project with multiple nested sub-
                           projects, set the `find_root_dir_max_project_nesting`
                           key to an integer greater than 1.
                           Ex: Set `find_root_dir_max_project_nesting` to 2 if
                           this is your project tree:
                           build.sbt <- this is the desired root
                             a/
                               b/
                                 - build.sbt <- subproject, not the desired root
                                 - src/main/scala/Main.scala

                           If you need even more fine-grained control over
                           finding your root-dir (in cases where you have very
                           uncommon build layouts) you can also use the
                           `find_root_dir` key in the config to provide your
                           own custom function to find the root dir given a
                           starting dir and root patterns. _You more than likely
                           shouldn't need to do this_.

                           The other small difference is the `settings` key.
                           Since this is only the config for `nvim-metals` you
                           don't need to preface your settings object with the
                           `metals` keyword. You can find more information
                           about how to set these in |metals-settings|.

                           NOTE: This function also includes some
                           metals-specific autocommands
                           that are given to the `on_attach()` of the config.

                           NOTE: Keep in mind that there are some other
                           autocmds that you'll probably want to set up locally
                           that aren't set by default to ensure features like
                           document highlighting and code lenses work. Make
                           sure to check out
                           |vim.lsp.buf.document_highlight()|,
                           |vim.lsp.buf.clear_references()|, and
                           |vim.lsp.codelens.refresh()|.

                                                            *install_or_update()*
install_or_update()        Install Metals if it doesn't exist or update to the
                           latest stable version or version set if you have a
                           `serverVersion` entry in your config table.

                                                                *new_java_file()*
new_java_file({directory_uri_opt}, {name_opt}, {file_type_option})

                           Use to execute a |metals.new-java-file| command. All
                           of the parameters are optional. If they are not
                           provided you will be prompted for them.

                           Parameters:
                           {directory_uri_opt} (string) directory that you'd
                           like the new file to be created in.

                           {name_opt} (string) name you'd like to be given to
                           the file.

                           {file_type_option} (string) the type of Java file
                           that you'd like to be created.

                                                               *new_scala_file()*
new_scala_file({directory_uri_opt}, {name_opt}, {file_type_option})

                           Use to execute a |metals.new-scala-file| command. All
                           of the parameters are optional. If they are not
                           provided you will be prompted for them.

                           Parameters:
                           {directory_uri_opt} (string) directory that you'd
                           like the new file to be created in.

                           {name_opt} (string) name you'd like to be given to
                           the file.

                           {file_type_option} (string) the type of Scala file
                           that you'd like to be created.

                                                            *new_scala_project()*
new_scala_project()        Use to execute a |metals.new-scala-project| command.

open_new_github_issue()    Grab some relevant information from your system and
                           open a new issue in the Metals GitHub repo with this
                           information.

                                                             *organize_imports()*
organize_imports()         Use a code action request to get edits from Metals
                           to organize imports for the current buffer.

                                                              *quick_worksheet()*
quick_worksheet()          Create a quick worksheet in your current dir with
                           the name of your current dir.

                                                                 *reset_choice()*
reset_choice()             Use to execute a |metals.reset-choice| command.

                                                              *reset_workspace()*
reset_workspace()          Use to execute a |metals.reset-workspace| command.

                                                         *restart_build_server()*
restart_build_server()     Use to execute a |metals.build-restart| command.

                                                               *restart_metals()*
restart_metals()           Restart the Metals server.

                                                                   *run_doctor()*
run_doctor()               Use to execute a |metals.doctor-run| command.

                                                                 *run_scalafix()*
run_scalafix()             Use to execute a |metals.scalafix-run| command.

                                                          *run_single_scalafix()*
run_single_scalafix()      Use to execute a |metals.scalafix-run-single| command.

                                                                 *scan_sources()*
scan_sources()             Use to execute a |metals.sources-scan| command.

                                                       *show_build_target_info()*
show_build_target_info()   Show info for a build target that you will choose
                           when you execute this.

                                                                     *show_cfr()*
show_cfr()                 Show decompiled cfr of the current file.

                                                                   *show_javap()*
show_javap()               Show decompiled javap of the current file

                                                           *show_javap_verbose()*
show_javap_verbose()       Show verbose decompiled javap of the current file

                                                      *show_semanticdb_compact()*
show_semanticdb_compact()  Show compact semanticdb representation of the
                           current file.

                                                     *show_semanticdb_detailed()*
show_semanticdb_detailed() Show detailed semanticdb representation of the
                           current file.

                                                        *show_semanticdb_proto()*
show_semanticdb_proto()    Show protobuf semanticdb representation of the
                           current file.

                                                                   *show_tasty()*
show_tasty()               Show TASTy representation of the current file.
                           NOTE: This only currently works with Scala 3.

                                                               *start_ammonite()*
start_ammonite()           Use to execute a |metals.ammonite-start| command.

                                                                 *start_server()*
start_server()             Start Metals server. Must be in a Scala or sbt file
                           in a workspace where Metals is not yet started.

                                                                *stop_ammonite()*
stop_ammonite()            Use to execute a |metals.ammonite-stop| command.

                                                       *super_method_hierarchy()*
super_method_hierarchy()   Use to execute a |metals.super-method-hierarchy|
                           command.

                                                                   *switch_bsp()*
switch_bsp()               Use to execute a |metals.bsp-switch| command.

                                                                  *toggle_logs()*
toggle_logs()              Use to trigger a `tail -f .metals/log` on your
                           current workspace that will open in the embedded
                           Neovim terminal in a new tab.

                                                               *toggle_setting()*
toggle_setting({setting})

                           Use to toggle a boolean setting in |metals-settings|.
                           If the setting is not set, you'll be toggling it on.

                           Parameters:
                           {setting} (string) the name of the setting that
                           you'd like to toggle.

                           Example usage: >

    lua require("metals").toggle_setting("verboseCompilation")
<

                                                                *type_of_range()*
type_of_range()            Use to get the type of the selected range. NOTE that
                           the mapping for this requires an `<Esc>` before the
                           actual mapping to ensure that the last correct range
                           is used.

                           Example usage: >

  vim.keymap.set("v", "K", function() require("metals").type_of_range() end)

<

                                                                 *zip_reports()*
zip_reports()              Zip up the icognito repos that are located under
                           `.metals/.reports/metals` than can be used to upload
                           with an issue report.

================================================================================
METALS TVP MODULE                                            *metals-tvp-module*

`nvim-metals` implements part of the Metals Tree View Protocol:
  https://scalameta.org/metals/docs/integrations/tree-view-protocol.html

The following configuration values are available to be passed into
|initialize_or_attach| under the `tvp` key. >

  -- Defaults
  Metals_config.tvp = {
    panel_width = 40,
    panel_alignment = "left",
    toggle_node_mapping = "<CR>",
    node_command_mapping = "r",
    collapsed_sign = "▸",
    expanded_sign = "▾",
    icons = {
      enabled = false,
      symbols = {
        object = "",
        trait = "",
        class = "ﭰ",
        interface = "",
        val = "",
        var = "",
        method = "ﬦ",
        enum = "",
        field = "",
        package = "",
      },
    },
  }
<

In order for the default icons to be displayed properly you need to have
installed a patched font.

The two main functions that you'll want to make sure to have mapped are
|toggle_tree_view| and |reveal_in_tree|. When creating a mapping for any of
the tvp functions, you'll want to ensure you require the `metals.tvp` module,
not just the `metals` module. The full api is below:

                                                              *reveal_in_tree()*
reveal_in_tree()             When in your source code this will locate the
                             node of the symbol that you are on, open the tree
                             view panel, and jump to it.

                                                            *toggle_tree_view()*
toggle_tree_view()           This will toggle your tree view panel open and
                             closed.

================================================================================
CUSTOM HANDLERS                                         *metals-custom-handlers*

The following are extra handlers that `nvim-metals` implements. More than likely
you'll never directly use these, but they are more of a reference of the extra
things that `nvim-metals` is providing you.

                                                             *['metals/status']*
['metals/status']({err}, {method}, {result})
                          Used to enable handling of |metals/status|. NOTE:
                          that `statusBarProvider` must be turned `"on"` for
                          this to do anything.

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsStatusParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsstatus

                                                           *['metals/inputBox']*
['metals/inputBox']({err}, {method}, {result})
                          Used to enable handling of |metals/inputBox|

                          Parameters:
                          {err}    Error
                          {method} metals/inputBox
                          {result} MetalsInputBoxParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsinputbox

                                                          *['metals/quickPick']*
['metals/quickPick']({err}, {method}, {result})
                          Used to enable handling of |metals/quickPick|

                          Parameters:
                          {err}    Error
                          {method} metals/quickPick
                          {result} MetalsQuickPickParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsquickpick

                                               *['metals/executeClientCommand']*
['metals/executeClientCommand']({err}, {method}, {result})
                          Used to enable handling of
                          |metals/executeClientCommand|

                          Parameters:
                          {err}    Error
                          {method} metals/executeClientCommand
                          {result} MetalsQuickPickParams

The spec for this can be found here:

https://scalameta.org/metals/docs/integrations/new-editor/#metalsexecuteclientcommand

================================================================================
INTEGRATIONS                                               *metals-integrations*

Other plugins that `nvim-metals` integrates with for various extra features.

                                                               *metals-nvim-dap*
In order for you to utilize Metals to run, test, and debug code, an
integration with https://github.com/mfussenegger/nvim-dap is provided offering
great DAP support. Before getting starting it's best to read the |dap.txt| to
get an understanding of how to both set up and use nvim-dap as you'll need to
ensure you have mappings defined and the correct configurations. To get
started, you'll want ensure that `nvim-dap` is installed and then extend your
metals configuration with the following `on_attach` function. >

  metals_config.on_attach = function(client, bufnr)
    require("metals").setup_dap()
  end
<

This will ensure that the correct |dap-adapter| is configured for Scala.

From here, there are 3 main ways you can interact with `nvim-dap`. The first
requires no further setup and relies on code lenses. You'll notice that you
will have `run` and `debug` code lenses on your main methods and `test` and
`testDebug` code lenses on your test classes. By triggering these behind the
scenes everything should just work. However, if you're making usage of
`jvmOptions`, `args` and even an `envFile` you'll want to make some
|dap-configuration|s, which will give you finer grain control.

These configurations are the configurations explained in |dap-configuration|
with a metals-specific table added under the `metals` key. The valid keys in
the metals table are as follows: >

  metals = {
    runType = "run",
    args = { "foo", "bar" },
    jvmOptions = { "-Dpropert=123" },
    env = { "RETRY" = "TRUE" },
    envFile = ".env"
  }
<

The final option is to attach to a remote debugger, here the expected
configuration should match the vscode configuration, requiring a
hostName, port, buildTarget, and setting request to "attach".

NOTE: Keep in mind that if you are defining these configurations you'll want
to trigger them with your dap mappings, not the code lenses.

You can also read about the various keys and their meanings here in the Metals
docs:

https://scalameta.org/metals/docs/integrations/debug-adapter-protocol.html.

The following run types are valid for Metals.
  - `run` (automatically discovers the main method and runs it for the current
    build target)
  - `testFile` (will discover all test classes in your current file and test
    them)
  - `testTarget` (will discover all test classes in your current build target
    and test them)
  - `runOrTestFile` (if there is a main method in the current file, it will
    run it or if there are tests in the file, run those)

Below you can see an example of configurations, one for running or testing the
current file, one for testing the entire target, and one for attaching to
an existing remote debugger. >

  local dap = require("dap")

  dap.configurations.scala = {
    {
      type = "scala",
      request = "launch",
      name = "Run or Test Target",
      metals = {
        runType = "runOrTestFile",
      },
    },
    {
      type = "scala",
      request = "launch",
      name = "Test Target",
      metals = {
        runType = "testTarget",
      },
    },
    {
      type = "scala",
      request = "attach",
      name = "Attach to Localhost",
      hostName = "localhost",
      port = 5005,
      buildTarget = "root",
    }
  }
<
You may also want to use the `Select Test Suite` and `Select Test Case`
commands to run tests. For them to work correctly you should set the
`testUserInterface` setting to `"Test Explorer"` as you see below. This action
will deactivate code lenses for test classes. >

  metals_config.settings = {
    testUserInterface = "Test Explorer",
  }
<
                                                              *metals-telescope*

Metals provides a custom picker from
https://github.com/nvim-telescope/telescope.nvim which allows you to easily
choose any of the |metals-commands|. You can trigger the picker by using the
following function in a mapping: >

  lua require("telescope").extensions.metals.commands()
<

If this is the only way you'll trigger the picker, then there is no need to
explicitly load it in your telescope config. However, if you want the module
to be autocompleted when trying to trigger it via: >

  :Telescope metals commands

<

Then you'll want to explicitly enable it. NOTE that by doing this it will no
longer be lazy loaded. >

  require("telescope").extensions.metals.commands()

<

NOTE: If you'd rather utilize |vim.ui.select| for this a more generate
|commands()| is available in the |metals-lua-api|.

vim:tw=80:ts=2:ft=help:
